
// An optional flag to set the exact number of memory cells to use for the heap.
// This makes Oak an extremely suitable language for embedded development!
#[heap(128)]

type bool(1) {
    fn true() -> bool { 1 }
    fn false() -> bool { 0 }

    fn val(self: &bool) -> &num { self }

    fn not(self: &bool) -> bool {
        let result: bool = bool::true();
        // "self->val" is equivalent to "*self.val()"
        if self->val { result = bool::false(); }
        result
    }
}

fn main() {
    putnumln(square(5));

    let b: bool = bool::false();
    putboolln(b);
    // assign to b's "val" attribute
    b->val = 1;
    putboolln(b);
    b = bool::true();
    putboolln(b);

    let size: num = 32;
    // Allocate 32 cells
    let addr: &char = alloc(size);
    // Free those 32 cells
    free addr: size;
}


fn putbool(b: bool) {
    if b {
        putstr("true");
    }

    if b.not() {
        putstr("false");
    }
}

fn putboolln(b: bool) {
    putbool(b); putchar('\n');
}

// Functions can be ordered independently
fn square(x: num) -> num {
    putstr("Squaring the number '");
    putnum(x);
    putcharln('\'');
    // The last statement in a body doesn't require brackets
    x * x
}